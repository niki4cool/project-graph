{"ast":null,"code":"module.exports = generateBoundsFunction;\nmodule.exports.generateFunctionBody = generateBoundsFunctionBody;\n\nvar createPatternBuilder = require('./createPatternBuilder');\n\nfunction generateBoundsFunction(dimension) {\n  var code = generateBoundsFunctionBody(dimension);\n  return new Function('bodies', 'settings', 'random', code);\n}\n\nfunction generateBoundsFunctionBody(dimension) {\n  var pattern = createPatternBuilder(dimension);\n  var code = \"\\n  var boundingBox = {\\n    \".concat(pattern('min_{var}: 0, max_{var}: 0,', {\n    indent: 4\n  }), \"\\n  };\\n\\n  return {\\n    box: boundingBox,\\n\\n    update: updateBoundingBox,\\n\\n    reset: resetBoundingBox,\\n\\n    getBestNewPosition: function (neighbors) {\\n      var \").concat(pattern('base_{var} = 0', {\n    join: ', '\n  }), \";\\n\\n      if (neighbors.length) {\\n        for (var i = 0; i < neighbors.length; ++i) {\\n          let neighborPos = neighbors[i].pos;\\n          \").concat(pattern('base_{var} += neighborPos.{var};', {\n    indent: 10\n  }), \"\\n        }\\n\\n        \").concat(pattern('base_{var} /= neighbors.length;', {\n    indent: 8\n  }), \"\\n      } else {\\n        \").concat(pattern('base_{var} = (boundingBox.min_{var} + boundingBox.max_{var}) / 2;', {\n    indent: 8\n  }), \"\\n      }\\n\\n      var springLength = settings.springLength;\\n      return {\\n        \").concat(pattern('{var}: base_{var} + (random.nextDouble() - 0.5) * springLength,', {\n    indent: 8\n  }), \"\\n      };\\n    }\\n  };\\n\\n  function updateBoundingBox() {\\n    var i = bodies.length;\\n    if (i === 0) return; // No bodies - no borders.\\n\\n    \").concat(pattern('var max_{var} = -Infinity;', {\n    indent: 4\n  }), \"\\n    \").concat(pattern('var min_{var} = Infinity;', {\n    indent: 4\n  }), \"\\n\\n    while(i--) {\\n      // this is O(n), it could be done faster with quadtree, if we check the root node bounds\\n      var bodyPos = bodies[i].pos;\\n      \").concat(pattern('if (bodyPos.{var} < min_{var}) min_{var} = bodyPos.{var};', {\n    indent: 6\n  }), \"\\n      \").concat(pattern('if (bodyPos.{var} > max_{var}) max_{var} = bodyPos.{var};', {\n    indent: 6\n  }), \"\\n    }\\n\\n    \").concat(pattern('boundingBox.min_{var} = min_{var};', {\n    indent: 4\n  }), \"\\n    \").concat(pattern('boundingBox.max_{var} = max_{var};', {\n    indent: 4\n  }), \"\\n  }\\n\\n  function resetBoundingBox() {\\n    \").concat(pattern('boundingBox.min_{var} = boundingBox.max_{var} = 0;', {\n    indent: 4\n  }), \"\\n  }\\n\");\n  return code;\n}","map":{"version":3,"names":["module","exports","generateBoundsFunction","generateFunctionBody","generateBoundsFunctionBody","createPatternBuilder","require","dimension","code","Function","pattern","indent","join"],"sources":["X:/Project/graph/node_modules/ngraph.forcelayout/lib/codeGenerators/generateBounds.js"],"sourcesContent":["\nmodule.exports = generateBoundsFunction;\nmodule.exports.generateFunctionBody = generateBoundsFunctionBody;\n\nconst createPatternBuilder = require('./createPatternBuilder');\n\nfunction generateBoundsFunction(dimension) {\n  let code = generateBoundsFunctionBody(dimension);\n  return new Function('bodies', 'settings', 'random', code);\n}\n\nfunction generateBoundsFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n\n  let code = `\n  var boundingBox = {\n    ${pattern('min_{var}: 0, max_{var}: 0,', {indent: 4})}\n  };\n\n  return {\n    box: boundingBox,\n\n    update: updateBoundingBox,\n\n    reset: resetBoundingBox,\n\n    getBestNewPosition: function (neighbors) {\n      var ${pattern('base_{var} = 0', {join: ', '})};\n\n      if (neighbors.length) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          let neighborPos = neighbors[i].pos;\n          ${pattern('base_{var} += neighborPos.{var};', {indent: 10})}\n        }\n\n        ${pattern('base_{var} /= neighbors.length;', {indent: 8})}\n      } else {\n        ${pattern('base_{var} = (boundingBox.min_{var} + boundingBox.max_{var}) / 2;', {indent: 8})}\n      }\n\n      var springLength = settings.springLength;\n      return {\n        ${pattern('{var}: base_{var} + (random.nextDouble() - 0.5) * springLength,', {indent: 8})}\n      };\n    }\n  };\n\n  function updateBoundingBox() {\n    var i = bodies.length;\n    if (i === 0) return; // No bodies - no borders.\n\n    ${pattern('var max_{var} = -Infinity;', {indent: 4})}\n    ${pattern('var min_{var} = Infinity;', {indent: 4})}\n\n    while(i--) {\n      // this is O(n), it could be done faster with quadtree, if we check the root node bounds\n      var bodyPos = bodies[i].pos;\n      ${pattern('if (bodyPos.{var} < min_{var}) min_{var} = bodyPos.{var};', {indent: 6})}\n      ${pattern('if (bodyPos.{var} > max_{var}) max_{var} = bodyPos.{var};', {indent: 6})}\n    }\n\n    ${pattern('boundingBox.min_{var} = min_{var};', {indent: 4})}\n    ${pattern('boundingBox.max_{var} = max_{var};', {indent: 4})}\n  }\n\n  function resetBoundingBox() {\n    ${pattern('boundingBox.min_{var} = boundingBox.max_{var} = 0;', {indent: 4})}\n  }\n`;\n  return code;\n}\n"],"mappings":"AACAA,MAAM,CAACC,OAAP,GAAiBC,sBAAjB;AACAF,MAAM,CAACC,OAAP,CAAeE,oBAAf,GAAsCC,0BAAtC;;AAEA,IAAMC,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAApC;;AAEA,SAASJ,sBAAT,CAAgCK,SAAhC,EAA2C;EACzC,IAAIC,IAAI,GAAGJ,0BAA0B,CAACG,SAAD,CAArC;EACA,OAAO,IAAIE,QAAJ,CAAa,QAAb,EAAuB,UAAvB,EAAmC,QAAnC,EAA6CD,IAA7C,CAAP;AACD;;AAED,SAASJ,0BAAT,CAAoCG,SAApC,EAA+C;EAC7C,IAAIG,OAAO,GAAGL,oBAAoB,CAACE,SAAD,CAAlC;EAEA,IAAIC,IAAI,0CAEJE,OAAO,CAAC,6BAAD,EAAgC;IAACC,MAAM,EAAE;EAAT,CAAhC,CAFH,wLAaED,OAAO,CAAC,gBAAD,EAAmB;IAACE,IAAI,EAAE;EAAP,CAAnB,CAbT,gKAkBEF,OAAO,CAAC,kCAAD,EAAqC;IAACC,MAAM,EAAE;EAAT,CAArC,CAlBT,oCAqBAD,OAAO,CAAC,iCAAD,EAAoC;IAACC,MAAM,EAAE;EAAT,CAApC,CArBP,uCAuBAD,OAAO,CAAC,mEAAD,EAAsE;IAACC,MAAM,EAAE;EAAT,CAAtE,CAvBP,mGA4BAD,OAAO,CAAC,iEAAD,EAAoE;IAACC,MAAM,EAAE;EAAT,CAApE,CA5BP,iKAqCJD,OAAO,CAAC,4BAAD,EAA+B;IAACC,MAAM,EAAE;EAAT,CAA/B,CArCH,mBAsCJD,OAAO,CAAC,2BAAD,EAA8B;IAACC,MAAM,EAAE;EAAT,CAA9B,CAtCH,6KA2CFD,OAAO,CAAC,2DAAD,EAA8D;IAACC,MAAM,EAAE;EAAT,CAA9D,CA3CL,qBA4CFD,OAAO,CAAC,2DAAD,EAA8D;IAACC,MAAM,EAAE;EAAT,CAA9D,CA5CL,4BA+CJD,OAAO,CAAC,oCAAD,EAAuC;IAACC,MAAM,EAAE;EAAT,CAAvC,CA/CH,mBAgDJD,OAAO,CAAC,oCAAD,EAAuC;IAACC,MAAM,EAAE;EAAT,CAAvC,CAhDH,2DAoDJD,OAAO,CAAC,oDAAD,EAAuD;IAACC,MAAM,EAAE;EAAT,CAAvD,CApDH,YAAR;EAuDA,OAAOH,IAAP;AACD"},"metadata":{},"sourceType":"script"}