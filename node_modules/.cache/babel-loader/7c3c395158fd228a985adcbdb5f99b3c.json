{"ast":null,"code":"/**\n * Manages a simulation of physical forces acting on bodies and springs.\n */\nmodule.exports = createPhysicsSimulator;\n\nvar generateCreateBodyFunction = require('./codeGenerators/generateCreateBody');\n\nvar generateQuadTreeFunction = require('./codeGenerators/generateQuadTree');\n\nvar generateBoundsFunction = require('./codeGenerators/generateBounds');\n\nvar generateCreateDragForceFunction = require('./codeGenerators/generateCreateDragForce');\n\nvar generateCreateSpringForceFunction = require('./codeGenerators/generateCreateSpringForce');\n\nvar generateIntegratorFunction = require('./codeGenerators/generateIntegrator');\n\nvar dimensionalCache = {};\n\nfunction createPhysicsSimulator(settings) {\n  var Spring = require('./spring');\n\n  var merge = require('ngraph.merge');\n\n  var eventify = require('ngraph.events');\n\n  if (settings) {\n    // Check for names from older versions of the layout\n    if (settings.springCoeff !== undefined) throw new Error('springCoeff was renamed to springCoefficient');\n    if (settings.dragCoeff !== undefined) throw new Error('dragCoeff was renamed to dragCoefficient');\n  }\n\n  settings = merge(settings, {\n    /**\n     * Ideal length for links (springs in physical model).\n     */\n    springLength: 10,\n\n    /**\n     * Hook's law coefficient. 1 - solid spring.\n     */\n    springCoefficient: 0.8,\n\n    /**\n     * Coulomb's law coefficient. It's used to repel nodes thus should be negative\n     * if you make it positive nodes start attract each other :).\n     */\n    gravity: -12,\n\n    /**\n     * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).\n     * The closer it's to 1 the more nodes algorithm will have to go through.\n     * Setting it to one makes Barnes Hut simulation no different from\n     * brute-force forces calculation (each node is considered).\n     */\n    theta: 0.8,\n\n    /**\n     * Drag force coefficient. Used to slow down system, thus should be less than 1.\n     * The closer it is to 0 the less tight system will be.\n     */\n    dragCoefficient: 0.9,\n    // TODO: Need to rename this to something better. E.g. `dragCoefficient`\n\n    /**\n     * Default time step (dt) for forces integration\n     */\n    timeStep: 0.5,\n\n    /**\n     * Adaptive time step uses average spring length to compute actual time step:\n     * See: https://twitter.com/anvaka/status/1293067160755957760\n     */\n    adaptiveTimeStepWeight: 0,\n\n    /**\n     * This parameter defines number of dimensions of the space where simulation\n     * is performed. \n     */\n    dimensions: 2,\n\n    /**\n     * In debug mode more checks are performed, this will help you catch errors\n     * quickly, however for production build it is recommended to turn off this flag\n     * to speed up computation.\n     */\n    debug: false\n  });\n  var factory = dimensionalCache[settings.dimensions];\n\n  if (!factory) {\n    var dimensions = settings.dimensions;\n    factory = {\n      Body: generateCreateBodyFunction(dimensions, settings.debug),\n      createQuadTree: generateQuadTreeFunction(dimensions),\n      createBounds: generateBoundsFunction(dimensions),\n      createDragForce: generateCreateDragForceFunction(dimensions),\n      createSpringForce: generateCreateSpringForceFunction(dimensions),\n      integrate: generateIntegratorFunction(dimensions)\n    };\n    dimensionalCache[dimensions] = factory;\n  }\n\n  var Body = factory.Body;\n  var createQuadTree = factory.createQuadTree;\n  var createBounds = factory.createBounds;\n  var createDragForce = factory.createDragForce;\n  var createSpringForce = factory.createSpringForce;\n  var integrate = factory.integrate;\n\n  var createBody = function createBody(pos) {\n    return new Body(pos);\n  };\n\n  var random = require('ngraph.random').random(42);\n\n  var bodies = []; // Bodies in this simulation.\n\n  var springs = []; // Springs in this simulation.\n\n  var quadTree = createQuadTree(settings, random);\n  var bounds = createBounds(bodies, settings, random);\n  var springForce = createSpringForce(settings, random);\n  var dragForce = createDragForce(settings);\n  var totalMovement = 0; // how much movement we made on last step\n\n  var forces = [];\n  var forceMap = new Map();\n  var iterationNumber = 0;\n  addForce('nbody', nbodyForce);\n  addForce('spring', updateSpringForce);\n  var publicApi = {\n    /**\n     * Array of bodies, registered with current simulator\n     *\n     * Note: To add new body, use addBody() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    bodies: bodies,\n    quadTree: quadTree,\n\n    /**\n     * Array of springs, registered with current simulator\n     *\n     * Note: To add new spring, use addSpring() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    springs: springs,\n\n    /**\n     * Returns settings with which current simulator was initialized\n     */\n    settings: settings,\n\n    /**\n     * Adds a new force to simulation\n     */\n    addForce: addForce,\n\n    /**\n     * Removes a force from the simulation.\n     */\n    removeForce: removeForce,\n\n    /**\n     * Returns a map of all registered forces.\n     */\n    getForces: getForces,\n\n    /**\n     * Performs one step of force simulation.\n     *\n     * @returns {boolean} true if system is considered stable; False otherwise.\n     */\n    step: function step() {\n      for (var i = 0; i < forces.length; ++i) {\n        forces[i](iterationNumber);\n      }\n\n      var movement = integrate(bodies, settings.timeStep, settings.adaptiveTimeStepWeight);\n      iterationNumber += 1;\n      return movement;\n    },\n\n    /**\n     * Adds body to the system\n     *\n     * @param {ngraph.physics.primitives.Body} body physical body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBody: function addBody(body) {\n      if (!body) {\n        throw new Error('Body is required');\n      }\n\n      bodies.push(body);\n      return body;\n    },\n\n    /**\n     * Adds body to the system at given position\n     *\n     * @param {Object} pos position of a body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBodyAt: function addBodyAt(pos) {\n      if (!pos) {\n        throw new Error('Body position is required');\n      }\n\n      var body = createBody(pos);\n      bodies.push(body);\n      return body;\n    },\n\n    /**\n     * Removes body from the system\n     *\n     * @param {ngraph.physics.primitives.Body} body to remove\n     *\n     * @returns {Boolean} true if body found and removed. falsy otherwise;\n     */\n    removeBody: function removeBody(body) {\n      if (!body) {\n        return;\n      }\n\n      var idx = bodies.indexOf(body);\n\n      if (idx < 0) {\n        return;\n      }\n\n      bodies.splice(idx, 1);\n\n      if (bodies.length === 0) {\n        bounds.reset();\n      }\n\n      return true;\n    },\n\n    /**\n     * Adds a spring to this simulation.\n     *\n     * @returns {Object} - a handle for a spring. If you want to later remove\n     * spring pass it to removeSpring() method.\n     */\n    addSpring: function addSpring(body1, body2, springLength, springCoefficient) {\n      if (!body1 || !body2) {\n        throw new Error('Cannot add null spring to force simulator');\n      }\n\n      if (typeof springLength !== 'number') {\n        springLength = -1; // assume global configuration\n      }\n\n      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1);\n      springs.push(spring); // TODO: could mark simulator as dirty.\n\n      return spring;\n    },\n\n    /**\n     * Returns amount of movement performed on last step() call\n     */\n    getTotalMovement: function getTotalMovement() {\n      return totalMovement;\n    },\n\n    /**\n     * Removes spring from the system\n     *\n     * @param {Object} spring to remove. Spring is an object returned by addSpring\n     *\n     * @returns {Boolean} true if spring found and removed. falsy otherwise;\n     */\n    removeSpring: function removeSpring(spring) {\n      if (!spring) {\n        return;\n      }\n\n      var idx = springs.indexOf(spring);\n\n      if (idx > -1) {\n        springs.splice(idx, 1);\n        return true;\n      }\n    },\n    getBestNewBodyPosition: function getBestNewBodyPosition(neighbors) {\n      return bounds.getBestNewPosition(neighbors);\n    },\n\n    /**\n     * Returns bounding box which covers all bodies\n     */\n    getBBox: getBoundingBox,\n    getBoundingBox: getBoundingBox,\n    invalidateBBox: function invalidateBBox() {\n      console.warn('invalidateBBox() is deprecated, bounds always recomputed on `getBBox()` call');\n    },\n    // TODO: Move the force specific stuff to force\n    gravity: function gravity(value) {\n      if (value !== undefined) {\n        settings.gravity = value;\n        quadTree.options({\n          gravity: value\n        });\n        return this;\n      } else {\n        return settings.gravity;\n      }\n    },\n    theta: function theta(value) {\n      if (value !== undefined) {\n        settings.theta = value;\n        quadTree.options({\n          theta: value\n        });\n        return this;\n      } else {\n        return settings.theta;\n      }\n    },\n\n    /**\n     * Returns pseudo-random number generator instance.\n     */\n    random: random\n  }; // allow settings modification via public API:\n\n  expose(settings, publicApi);\n  eventify(publicApi);\n  return publicApi;\n\n  function getBoundingBox() {\n    bounds.update();\n    return bounds.box;\n  }\n\n  function addForce(forceName, forceFunction) {\n    if (forceMap.has(forceName)) throw new Error('Force ' + forceName + ' is already added');\n    forceMap.set(forceName, forceFunction);\n    forces.push(forceFunction);\n  }\n\n  function removeForce(forceName) {\n    var forceIndex = forces.indexOf(forceMap.get(forceName));\n    if (forceIndex < 0) return;\n    forces.splice(forceIndex, 1);\n    forceMap.delete(forceName);\n  }\n\n  function getForces() {\n    // TODO: Should I trust them or clone the forces?\n    return forceMap;\n  }\n\n  function\n    /* iterationUmber */\n  nbodyForce() {\n    if (bodies.length === 0) return;\n    quadTree.insertBodies(bodies);\n    var i = bodies.length;\n\n    while (i--) {\n      var body = bodies[i];\n\n      if (!body.isPinned) {\n        body.reset();\n        quadTree.updateBodyForce(body);\n        dragForce.update(body);\n      }\n    }\n  }\n\n  function updateSpringForce() {\n    var i = springs.length;\n\n    while (i--) {\n      springForce.update(springs[i]);\n    }\n  }\n}\n\nfunction expose(settings, target) {\n  for (var key in settings) {\n    augment(settings, target, key);\n  }\n}\n\nfunction augment(source, target, key) {\n  if (!source.hasOwnProperty(key)) return;\n\n  if (typeof target[key] === 'function') {\n    // this accessor is already defined. Ignore it\n    return;\n  }\n\n  var sourceIsNumber = Number.isFinite(source[key]);\n\n  if (sourceIsNumber) {\n    target[key] = function (value) {\n      if (value !== undefined) {\n        if (!Number.isFinite(value)) throw new Error('Value of ' + key + ' should be a valid number.');\n        source[key] = value;\n        return target;\n      }\n\n      return source[key];\n    };\n  } else {\n    target[key] = function (value) {\n      if (value !== undefined) {\n        source[key] = value;\n        return target;\n      }\n\n      return source[key];\n    };\n  }\n}","map":{"version":3,"names":["module","exports","createPhysicsSimulator","generateCreateBodyFunction","require","generateQuadTreeFunction","generateBoundsFunction","generateCreateDragForceFunction","generateCreateSpringForceFunction","generateIntegratorFunction","dimensionalCache","settings","Spring","merge","eventify","springCoeff","undefined","Error","dragCoeff","springLength","springCoefficient","gravity","theta","dragCoefficient","timeStep","adaptiveTimeStepWeight","dimensions","debug","factory","Body","createQuadTree","createBounds","createDragForce","createSpringForce","integrate","createBody","pos","random","bodies","springs","quadTree","bounds","springForce","dragForce","totalMovement","forces","forceMap","Map","iterationNumber","addForce","nbodyForce","updateSpringForce","publicApi","removeForce","getForces","step","i","length","movement","addBody","body","push","addBodyAt","removeBody","idx","indexOf","splice","reset","addSpring","body1","body2","spring","getTotalMovement","removeSpring","getBestNewBodyPosition","neighbors","getBestNewPosition","getBBox","getBoundingBox","invalidateBBox","console","warn","value","options","expose","update","box","forceName","forceFunction","has","set","forceIndex","get","delete","insertBodies","isPinned","updateBodyForce","target","key","augment","source","hasOwnProperty","sourceIsNumber","Number","isFinite"],"sources":["X:/Project/graph/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js"],"sourcesContent":["/**\n * Manages a simulation of physical forces acting on bodies and springs.\n */\nmodule.exports = createPhysicsSimulator;\n\nvar generateCreateBodyFunction = require('./codeGenerators/generateCreateBody');\nvar generateQuadTreeFunction = require('./codeGenerators/generateQuadTree');\nvar generateBoundsFunction = require('./codeGenerators/generateBounds');\nvar generateCreateDragForceFunction = require('./codeGenerators/generateCreateDragForce');\nvar generateCreateSpringForceFunction = require('./codeGenerators/generateCreateSpringForce');\nvar generateIntegratorFunction = require('./codeGenerators/generateIntegrator');\n\nvar dimensionalCache = {};\n\nfunction createPhysicsSimulator(settings) {\n  var Spring = require('./spring');\n  var merge = require('ngraph.merge');\n  var eventify = require('ngraph.events');\n  if (settings) {\n    // Check for names from older versions of the layout\n    if (settings.springCoeff !== undefined) throw new Error('springCoeff was renamed to springCoefficient');\n    if (settings.dragCoeff !== undefined) throw new Error('dragCoeff was renamed to dragCoefficient');\n  }\n\n  settings = merge(settings, {\n      /**\n       * Ideal length for links (springs in physical model).\n       */\n      springLength: 10,\n\n      /**\n       * Hook's law coefficient. 1 - solid spring.\n       */\n      springCoefficient: 0.8, \n\n      /**\n       * Coulomb's law coefficient. It's used to repel nodes thus should be negative\n       * if you make it positive nodes start attract each other :).\n       */\n      gravity: -12,\n\n      /**\n       * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).\n       * The closer it's to 1 the more nodes algorithm will have to go through.\n       * Setting it to one makes Barnes Hut simulation no different from\n       * brute-force forces calculation (each node is considered).\n       */\n      theta: 0.8,\n\n      /**\n       * Drag force coefficient. Used to slow down system, thus should be less than 1.\n       * The closer it is to 0 the less tight system will be.\n       */\n      dragCoefficient: 0.9, // TODO: Need to rename this to something better. E.g. `dragCoefficient`\n\n      /**\n       * Default time step (dt) for forces integration\n       */\n      timeStep : 0.5,\n\n      /**\n       * Adaptive time step uses average spring length to compute actual time step:\n       * See: https://twitter.com/anvaka/status/1293067160755957760\n       */\n      adaptiveTimeStepWeight: 0,\n\n      /**\n       * This parameter defines number of dimensions of the space where simulation\n       * is performed. \n       */\n      dimensions: 2,\n\n      /**\n       * In debug mode more checks are performed, this will help you catch errors\n       * quickly, however for production build it is recommended to turn off this flag\n       * to speed up computation.\n       */\n      debug: false\n  });\n\n  var factory = dimensionalCache[settings.dimensions];\n  if (!factory) {\n    var dimensions = settings.dimensions;\n    factory = {\n      Body: generateCreateBodyFunction(dimensions, settings.debug),\n      createQuadTree: generateQuadTreeFunction(dimensions),\n      createBounds: generateBoundsFunction(dimensions),\n      createDragForce: generateCreateDragForceFunction(dimensions),\n      createSpringForce: generateCreateSpringForceFunction(dimensions),\n      integrate: generateIntegratorFunction(dimensions),\n    };\n    dimensionalCache[dimensions] = factory;\n  }\n\n  var Body = factory.Body;\n  var createQuadTree = factory.createQuadTree;\n  var createBounds = factory.createBounds;\n  var createDragForce = factory.createDragForce;\n  var createSpringForce = factory.createSpringForce;\n  var integrate = factory.integrate;\n  var createBody = pos => new Body(pos);\n\n  var random = require('ngraph.random').random(42);\n  var bodies = []; // Bodies in this simulation.\n  var springs = []; // Springs in this simulation.\n\n  var quadTree = createQuadTree(settings, random);\n  var bounds = createBounds(bodies, settings, random);\n  var springForce = createSpringForce(settings, random);\n  var dragForce = createDragForce(settings);\n\n  var totalMovement = 0; // how much movement we made on last step\n  var forces = [];\n  var forceMap = new Map();\n  var iterationNumber = 0;\n \n  addForce('nbody', nbodyForce);\n  addForce('spring', updateSpringForce);\n\n  var publicApi = {\n    /**\n     * Array of bodies, registered with current simulator\n     *\n     * Note: To add new body, use addBody() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    bodies: bodies,\n  \n    quadTree: quadTree,\n\n    /**\n     * Array of springs, registered with current simulator\n     *\n     * Note: To add new spring, use addSpring() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    springs: springs,\n\n    /**\n     * Returns settings with which current simulator was initialized\n     */\n    settings: settings,\n\n    /**\n     * Adds a new force to simulation\n     */\n    addForce: addForce,\n    \n    /**\n     * Removes a force from the simulation.\n     */\n    removeForce: removeForce,\n\n    /**\n     * Returns a map of all registered forces.\n     */\n    getForces: getForces,\n\n    /**\n     * Performs one step of force simulation.\n     *\n     * @returns {boolean} true if system is considered stable; False otherwise.\n     */\n    step: function () {\n      for (var i = 0; i < forces.length; ++i) {\n        forces[i](iterationNumber);\n      }\n      var movement = integrate(bodies, settings.timeStep, settings.adaptiveTimeStepWeight);\n      iterationNumber += 1;\n      return movement;\n    },\n\n    /**\n     * Adds body to the system\n     *\n     * @param {ngraph.physics.primitives.Body} body physical body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBody: function (body) {\n      if (!body) {\n        throw new Error('Body is required');\n      }\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Adds body to the system at given position\n     *\n     * @param {Object} pos position of a body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBodyAt: function (pos) {\n      if (!pos) {\n        throw new Error('Body position is required');\n      }\n      var body = createBody(pos);\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Removes body from the system\n     *\n     * @param {ngraph.physics.primitives.Body} body to remove\n     *\n     * @returns {Boolean} true if body found and removed. falsy otherwise;\n     */\n    removeBody: function (body) {\n      if (!body) { return; }\n\n      var idx = bodies.indexOf(body);\n      if (idx < 0) { return; }\n\n      bodies.splice(idx, 1);\n      if (bodies.length === 0) {\n        bounds.reset();\n      }\n      return true;\n    },\n\n    /**\n     * Adds a spring to this simulation.\n     *\n     * @returns {Object} - a handle for a spring. If you want to later remove\n     * spring pass it to removeSpring() method.\n     */\n    addSpring: function (body1, body2, springLength, springCoefficient) {\n      if (!body1 || !body2) {\n        throw new Error('Cannot add null spring to force simulator');\n      }\n\n      if (typeof springLength !== 'number') {\n        springLength = -1; // assume global configuration\n      }\n\n      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1);\n      springs.push(spring);\n\n      // TODO: could mark simulator as dirty.\n      return spring;\n    },\n\n    /**\n     * Returns amount of movement performed on last step() call\n     */\n    getTotalMovement: function () {\n      return totalMovement;\n    },\n\n    /**\n     * Removes spring from the system\n     *\n     * @param {Object} spring to remove. Spring is an object returned by addSpring\n     *\n     * @returns {Boolean} true if spring found and removed. falsy otherwise;\n     */\n    removeSpring: function (spring) {\n      if (!spring) { return; }\n      var idx = springs.indexOf(spring);\n      if (idx > -1) {\n        springs.splice(idx, 1);\n        return true;\n      }\n    },\n\n    getBestNewBodyPosition: function (neighbors) {\n      return bounds.getBestNewPosition(neighbors);\n    },\n\n    /**\n     * Returns bounding box which covers all bodies\n     */\n    getBBox: getBoundingBox, \n    getBoundingBox: getBoundingBox, \n\n    invalidateBBox: function () {\n      console.warn('invalidateBBox() is deprecated, bounds always recomputed on `getBBox()` call');\n    },\n\n    // TODO: Move the force specific stuff to force\n    gravity: function (value) {\n      if (value !== undefined) {\n        settings.gravity = value;\n        quadTree.options({gravity: value});\n        return this;\n      } else {\n        return settings.gravity;\n      }\n    },\n\n    theta: function (value) {\n      if (value !== undefined) {\n        settings.theta = value;\n        quadTree.options({theta: value});\n        return this;\n      } else {\n        return settings.theta;\n      }\n    },\n\n    /**\n     * Returns pseudo-random number generator instance.\n     */\n    random: random\n  };\n\n  // allow settings modification via public API:\n  expose(settings, publicApi);\n\n  eventify(publicApi);\n\n  return publicApi;\n\n  function getBoundingBox() {\n    bounds.update();\n    return bounds.box;\n  }\n\n  function addForce(forceName, forceFunction) {\n    if (forceMap.has(forceName)) throw new Error('Force ' + forceName + ' is already added');\n\n    forceMap.set(forceName, forceFunction);\n    forces.push(forceFunction);\n  }\n\n  function removeForce(forceName) {\n    var forceIndex = forces.indexOf(forceMap.get(forceName));\n    if (forceIndex < 0) return;\n    forces.splice(forceIndex, 1);\n    forceMap.delete(forceName);\n  }\n\n  function getForces() {\n    // TODO: Should I trust them or clone the forces?\n    return forceMap;\n  }\n\n  function nbodyForce(/* iterationUmber */) {\n    if (bodies.length === 0) return;\n\n    quadTree.insertBodies(bodies);\n    var i = bodies.length;\n    while (i--) {\n      var body = bodies[i];\n      if (!body.isPinned) {\n        body.reset();\n        quadTree.updateBodyForce(body);\n        dragForce.update(body);\n      }\n    }\n  }\n\n  function updateSpringForce() {\n    var i = springs.length;\n    while (i--) {\n      springForce.update(springs[i]);\n    }\n  }\n\n}\n\nfunction expose(settings, target) {\n  for (var key in settings) {\n    augment(settings, target, key);\n  }\n}\n\nfunction augment(source, target, key) {\n  if (!source.hasOwnProperty(key)) return;\n  if (typeof target[key] === 'function') {\n    // this accessor is already defined. Ignore it\n    return;\n  }\n  var sourceIsNumber = Number.isFinite(source[key]);\n\n  if (sourceIsNumber) {\n    target[key] = function (value) {\n      if (value !== undefined) {\n        if (!Number.isFinite(value)) throw new Error('Value of ' + key + ' should be a valid number.');\n        source[key] = value;\n        return target;\n      }\n      return source[key];\n    };\n  } else {\n    target[key] = function (value) {\n      if (value !== undefined) {\n        source[key] = value;\n        return target;\n      }\n      return source[key];\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}