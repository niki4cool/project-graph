{"ast":null,"code":"require('../../lib/keyboard.polyfill');\n\nvar MAX_DELTA = 0.2,\n    PROXY_FLAG = '__keyboard-controls-proxy';\nvar KeyboardEvent = window.KeyboardEvent;\n/**\n * Keyboard Controls component.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-keyboard-controls\n *\n * Bind keyboard events to components, or control your entities with the WASD keys.\n *\n * Why use KeyboardEvent.code? \"This is set to a string representing the key that was pressed to\n * generate the KeyboardEvent, without taking the current keyboard layout (e.g., QWERTY vs.\n * Dvorak), locale (e.g., English vs. French), or any modifier keys into account. This is useful\n * when you care about which physical key was pressed, rather thanwhich character it corresponds\n * to. For example, if you’re a writing a game, you might want a certain set of keys to move the\n * player in different directions, and that mapping should ideally be independent of keyboard\n * layout. See: https://developers.google.com/web/updates/2016/04/keyboardevent-keys-codes\n *\n * @namespace wasd-controls\n * keys the entity moves and if you release it will stop. Easing simulates friction.\n * to the entity when pressing the keys.\n * @param {bool} [enabled=true] - To completely enable or disable the controls\n */\n\nmodule.exports = AFRAME.registerComponent('keyboard-controls', {\n  schema: {\n    enabled: {\n      default: true\n    },\n    debug: {\n      default: false\n    }\n  },\n  init: function init() {\n    this.dVelocity = new THREE.Vector3();\n    this.localKeys = {};\n    this.listeners = {\n      keydown: this.onKeyDown.bind(this),\n      keyup: this.onKeyUp.bind(this),\n      blur: this.onBlur.bind(this)\n    };\n    this.attachEventListeners();\n  },\n\n  /*******************************************************************\n  * Movement\n  */\n  isVelocityActive: function isVelocityActive() {\n    return this.data.enabled && !!Object.keys(this.getKeys()).length;\n  },\n  getVelocityDelta: function getVelocityDelta() {\n    var data = this.data,\n        keys = this.getKeys();\n    this.dVelocity.set(0, 0, 0);\n\n    if (data.enabled) {\n      if (keys.KeyW || keys.ArrowUp) {\n        this.dVelocity.z -= 1;\n      }\n\n      if (keys.KeyA || keys.ArrowLeft) {\n        this.dVelocity.x -= 1;\n      }\n\n      if (keys.KeyS || keys.ArrowDown) {\n        this.dVelocity.z += 1;\n      }\n\n      if (keys.KeyD || keys.ArrowRight) {\n        this.dVelocity.x += 1;\n      }\n    }\n\n    return this.dVelocity.clone();\n  },\n\n  /*******************************************************************\n  * Events\n  */\n  play: function play() {\n    this.attachEventListeners();\n  },\n  pause: function pause() {\n    this.removeEventListeners();\n  },\n  remove: function remove() {\n    this.pause();\n  },\n  attachEventListeners: function attachEventListeners() {\n    window.addEventListener('keydown', this.listeners.keydown, false);\n    window.addEventListener('keyup', this.listeners.keyup, false);\n    window.addEventListener('blur', this.listeners.blur, false);\n  },\n  removeEventListeners: function removeEventListeners() {\n    window.removeEventListener('keydown', this.listeners.keydown);\n    window.removeEventListener('keyup', this.listeners.keyup);\n    window.removeEventListener('blur', this.listeners.blur);\n  },\n  onKeyDown: function onKeyDown(event) {\n    if (AFRAME.utils.shouldCaptureKeyEvent(event)) {\n      this.localKeys[event.code] = true;\n      this.emit(event);\n    }\n  },\n  onKeyUp: function onKeyUp(event) {\n    if (AFRAME.utils.shouldCaptureKeyEvent(event)) {\n      delete this.localKeys[event.code];\n      this.emit(event);\n    }\n  },\n  onBlur: function onBlur() {\n    for (var code in this.localKeys) {\n      if (this.localKeys.hasOwnProperty(code)) {\n        delete this.localKeys[code];\n      }\n    }\n  },\n  emit: function emit(event) {\n    // TODO - keydown only initially?\n    // TODO - where the f is the spacebar\n    // Emit original event.\n    if (PROXY_FLAG in event) {\n      // TODO - Method never triggered.\n      this.el.emit(event.type, event);\n    } // Emit convenience event, identifying key.\n\n\n    this.el.emit(event.type + ':' + event.code, new KeyboardEvent(event.type, event));\n    if (this.data.debug) console.log(event.type + ':' + event.code);\n  },\n\n  /*******************************************************************\n  * Accessors\n  */\n  isPressed: function isPressed(code) {\n    return code in this.getKeys();\n  },\n  getKeys: function getKeys() {\n    if (this.isProxied()) {\n      return this.el.sceneEl.components['proxy-controls'].getKeyboard();\n    }\n\n    return this.localKeys;\n  },\n  isProxied: function isProxied() {\n    var proxyControls = this.el.sceneEl.components['proxy-controls'];\n    return proxyControls && proxyControls.isConnected();\n  }\n});","map":{"version":3,"names":["require","MAX_DELTA","PROXY_FLAG","KeyboardEvent","window","module","exports","AFRAME","registerComponent","schema","enabled","default","debug","init","dVelocity","THREE","Vector3","localKeys","listeners","keydown","onKeyDown","bind","keyup","onKeyUp","blur","onBlur","attachEventListeners","isVelocityActive","data","Object","keys","getKeys","length","getVelocityDelta","set","KeyW","ArrowUp","z","KeyA","ArrowLeft","x","KeyS","ArrowDown","KeyD","ArrowRight","clone","play","pause","removeEventListeners","remove","addEventListener","removeEventListener","event","utils","shouldCaptureKeyEvent","code","emit","hasOwnProperty","el","type","console","log","isPressed","isProxied","sceneEl","components","getKeyboard","proxyControls","isConnected"],"sources":["X:/Project/back/node_modules/aframe-extras/src/controls/keyboard-controls.js"],"sourcesContent":["require('../../lib/keyboard.polyfill');\n\nconst MAX_DELTA = 0.2,\n    PROXY_FLAG = '__keyboard-controls-proxy';\n\nconst KeyboardEvent = window.KeyboardEvent;\n\n/**\n * Keyboard Controls component.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-keyboard-controls\n *\n * Bind keyboard events to components, or control your entities with the WASD keys.\n *\n * Why use KeyboardEvent.code? \"This is set to a string representing the key that was pressed to\n * generate the KeyboardEvent, without taking the current keyboard layout (e.g., QWERTY vs.\n * Dvorak), locale (e.g., English vs. French), or any modifier keys into account. This is useful\n * when you care about which physical key was pressed, rather thanwhich character it corresponds\n * to. For example, if you’re a writing a game, you might want a certain set of keys to move the\n * player in different directions, and that mapping should ideally be independent of keyboard\n * layout. See: https://developers.google.com/web/updates/2016/04/keyboardevent-keys-codes\n *\n * @namespace wasd-controls\n * keys the entity moves and if you release it will stop. Easing simulates friction.\n * to the entity when pressing the keys.\n * @param {bool} [enabled=true] - To completely enable or disable the controls\n */\nmodule.exports = AFRAME.registerComponent('keyboard-controls', {\n  schema: {\n    enabled:           { default: true },\n    debug:             { default: false }\n  },\n\n  init: function () {\n    this.dVelocity = new THREE.Vector3();\n    this.localKeys = {};\n    this.listeners = {\n      keydown: this.onKeyDown.bind(this),\n      keyup: this.onKeyUp.bind(this),\n      blur: this.onBlur.bind(this)\n    };\n    this.attachEventListeners();\n  },\n\n  /*******************************************************************\n  * Movement\n  */\n\n  isVelocityActive: function () {\n    return this.data.enabled && !!Object.keys(this.getKeys()).length;\n  },\n\n  getVelocityDelta: function () {\n    const data = this.data,\n        keys = this.getKeys();\n\n    this.dVelocity.set(0, 0, 0);\n    if (data.enabled) {\n      if (keys.KeyW || keys.ArrowUp)    { this.dVelocity.z -= 1; }\n      if (keys.KeyA || keys.ArrowLeft)  { this.dVelocity.x -= 1; }\n      if (keys.KeyS || keys.ArrowDown)  { this.dVelocity.z += 1; }\n      if (keys.KeyD || keys.ArrowRight) { this.dVelocity.x += 1; }\n    }\n\n    return this.dVelocity.clone();\n  },\n\n  /*******************************************************************\n  * Events\n  */\n\n  play: function () {\n    this.attachEventListeners();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n  },\n\n  remove: function () {\n    this.pause();\n  },\n\n  attachEventListeners: function () {\n    window.addEventListener('keydown', this.listeners.keydown, false);\n    window.addEventListener('keyup', this.listeners.keyup, false);\n    window.addEventListener('blur', this.listeners.blur, false);\n  },\n\n  removeEventListeners: function () {\n    window.removeEventListener('keydown', this.listeners.keydown);\n    window.removeEventListener('keyup', this.listeners.keyup);\n    window.removeEventListener('blur', this.listeners.blur);\n  },\n\n  onKeyDown: function (event) {\n    if (AFRAME.utils.shouldCaptureKeyEvent(event)) {\n      this.localKeys[event.code] = true;\n      this.emit(event);\n    }\n  },\n\n  onKeyUp: function (event) {\n    if (AFRAME.utils.shouldCaptureKeyEvent(event)) {\n      delete this.localKeys[event.code];\n      this.emit(event);\n    }\n  },\n\n  onBlur: function () {\n    for (let code in this.localKeys) {\n      if (this.localKeys.hasOwnProperty(code)) {\n        delete this.localKeys[code];\n      }\n    }\n  },\n\n  emit: function (event) {\n    // TODO - keydown only initially?\n    // TODO - where the f is the spacebar\n\n    // Emit original event.\n    if (PROXY_FLAG in event) {\n      // TODO - Method never triggered.\n      this.el.emit(event.type, event);\n    }\n\n    // Emit convenience event, identifying key.\n    this.el.emit(event.type + ':' + event.code, new KeyboardEvent(event.type, event));\n    if (this.data.debug) console.log(event.type + ':' + event.code);\n  },\n\n  /*******************************************************************\n  * Accessors\n  */\n\n  isPressed: function (code) {\n    return code in this.getKeys();\n  },\n\n  getKeys: function () {\n    if (this.isProxied()) {\n      return this.el.sceneEl.components['proxy-controls'].getKeyboard();\n    }\n    return this.localKeys;\n  },\n\n  isProxied: function () {\n    const proxyControls = this.el.sceneEl.components['proxy-controls'];\n    return proxyControls && proxyControls.isConnected();\n  }\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}