{"ast":null,"code":"/* global CANNON */\n\n/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Handles events coming from the hand-controls.\n * Determines if the entity is grabbed or released.\n * Updates its position to move along the controller.\n */\nmodule.exports = AFRAME.registerComponent('grab', {\n  init: function init() {\n    this.system = this.el.sceneEl.systems.physics;\n    this.GRABBED_STATE = 'grabbed';\n    this.grabbing = false;\n    this.hitEl =\n    /** @type {AFRAME.Element}    */\n    null;\n    this.physics =\n    /** @type {AFRAME.System}     */\n    this.el.sceneEl.systems.physics;\n    this.constraint =\n    /** @type {CANNON.Constraint} */\n    null; // Bind event handlers\n\n    this.onHit = this.onHit.bind(this);\n    this.onGripOpen = this.onGripOpen.bind(this);\n    this.onGripClose = this.onGripClose.bind(this);\n  },\n  play: function play() {\n    var el = this.el;\n    el.addEventListener('hit', this.onHit);\n    el.addEventListener('gripdown', this.onGripClose);\n    el.addEventListener('gripup', this.onGripOpen);\n    el.addEventListener('trackpaddown', this.onGripClose);\n    el.addEventListener('trackpadup', this.onGripOpen);\n    el.addEventListener('triggerdown', this.onGripClose);\n    el.addEventListener('triggerup', this.onGripOpen);\n  },\n  pause: function pause() {\n    var el = this.el;\n    el.removeEventListener('hit', this.onHit);\n    el.removeEventListener('gripdown', this.onGripClose);\n    el.removeEventListener('gripup', this.onGripOpen);\n    el.removeEventListener('trackpaddown', this.onGripClose);\n    el.removeEventListener('trackpadup', this.onGripOpen);\n    el.removeEventListener('triggerdown', this.onGripClose);\n    el.removeEventListener('triggerup', this.onGripOpen);\n  },\n  onGripClose: function onGripClose() {\n    this.grabbing = true;\n  },\n  onGripOpen: function onGripOpen() {\n    var hitEl = this.hitEl;\n    this.grabbing = false;\n\n    if (!hitEl) {\n      return;\n    }\n\n    hitEl.removeState(this.GRABBED_STATE);\n    this.hitEl = undefined;\n    this.system.removeConstraint(this.constraint);\n    this.constraint = null;\n  },\n  onHit: function onHit(evt) {\n    var hitEl = evt.detail.el; // If the element is already grabbed (it could be grabbed by another controller).\n    // If the hand is not grabbing the element does not stick.\n    // If we're already grabbing something you can't grab again.\n\n    if (!hitEl || hitEl.is(this.GRABBED_STATE) || !this.grabbing || this.hitEl) {\n      return;\n    }\n\n    hitEl.addState(this.GRABBED_STATE);\n    this.hitEl = hitEl;\n    this.constraint = new CANNON.LockConstraint(this.el.body, hitEl.body);\n    this.system.addConstraint(this.constraint);\n  }\n});","map":{"version":3,"names":["module","exports","AFRAME","registerComponent","init","system","el","sceneEl","systems","physics","GRABBED_STATE","grabbing","hitEl","constraint","onHit","bind","onGripOpen","onGripClose","play","addEventListener","pause","removeEventListener","removeState","undefined","removeConstraint","evt","detail","is","addState","CANNON","LockConstraint","body","addConstraint"],"sources":["X:/Project/graph/node_modules/aframe-extras/src/misc/grab.js"],"sourcesContent":["/* global CANNON */\n\n/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Handles events coming from the hand-controls.\n * Determines if the entity is grabbed or released.\n * Updates its position to move along the controller.\n */\nmodule.exports = AFRAME.registerComponent('grab', {\n  init: function () {\n    this.system = this.el.sceneEl.systems.physics;\n\n    this.GRABBED_STATE = 'grabbed';\n\n    this.grabbing = false;\n    this.hitEl =      /** @type {AFRAME.Element}    */ null;\n    this.physics =    /** @type {AFRAME.System}     */ this.el.sceneEl.systems.physics;\n    this.constraint = /** @type {CANNON.Constraint} */ null;\n\n    // Bind event handlers\n    this.onHit = this.onHit.bind(this);\n    this.onGripOpen = this.onGripOpen.bind(this);\n    this.onGripClose = this.onGripClose.bind(this);\n  },\n\n  play: function () {\n    const el = this.el;\n    el.addEventListener('hit', this.onHit);\n    el.addEventListener('gripdown', this.onGripClose);\n    el.addEventListener('gripup', this.onGripOpen);\n    el.addEventListener('trackpaddown', this.onGripClose);\n    el.addEventListener('trackpadup', this.onGripOpen);\n    el.addEventListener('triggerdown', this.onGripClose);\n    el.addEventListener('triggerup', this.onGripOpen);\n  },\n\n  pause: function () {\n    const el = this.el;\n    el.removeEventListener('hit', this.onHit);\n    el.removeEventListener('gripdown', this.onGripClose);\n    el.removeEventListener('gripup', this.onGripOpen);\n    el.removeEventListener('trackpaddown', this.onGripClose);\n    el.removeEventListener('trackpadup', this.onGripOpen);\n    el.removeEventListener('triggerdown', this.onGripClose);\n    el.removeEventListener('triggerup', this.onGripOpen);\n  },\n\n  onGripClose: function () {\n    this.grabbing = true;\n  },\n\n  onGripOpen: function () {\n    const hitEl = this.hitEl;\n    this.grabbing = false;\n    if (!hitEl) { return; }\n    hitEl.removeState(this.GRABBED_STATE);\n    this.hitEl = undefined;\n    this.system.removeConstraint(this.constraint);\n    this.constraint = null;\n  },\n\n  onHit: function (evt) {\n    const hitEl = evt.detail.el;\n    // If the element is already grabbed (it could be grabbed by another controller).\n    // If the hand is not grabbing the element does not stick.\n    // If we're already grabbing something you can't grab again.\n    if (!hitEl || hitEl.is(this.GRABBED_STATE) || !this.grabbing || this.hitEl) { return; }\n    hitEl.addState(this.GRABBED_STATE);\n    this.hitEl = hitEl;\n    this.constraint = new CANNON.LockConstraint(this.el.body, hitEl.body);\n    this.system.addConstraint(this.constraint);\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}