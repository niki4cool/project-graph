{"ast":null,"code":"import _classCallCheck from \"X:/Project/graph/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"X:/Project/graph/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BufferGeometry, Clock, Float32BufferAttribute, Mesh, OrthographicCamera, Vector2, WebGLRenderTarget } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nvar EffectComposer = /*#__PURE__*/function () {\n  function EffectComposer(renderer, renderTarget) {\n    _classCallCheck(this, EffectComposer);\n\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      var size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true;\n    this.passes = []; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  _createClass(EffectComposer, [{\n    key: \"swapBuffers\",\n    value: function swapBuffers() {\n      var tmp = this.readBuffer;\n      this.readBuffer = this.writeBuffer;\n      this.writeBuffer = tmp;\n    }\n  }, {\n    key: \"addPass\",\n    value: function addPass(pass) {\n      this.passes.push(pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"insertPass\",\n    value: function insertPass(pass, index) {\n      this.passes.splice(index, 0, pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"removePass\",\n    value: function removePass(pass) {\n      var index = this.passes.indexOf(pass);\n\n      if (index !== -1) {\n        this.passes.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"isLastEnabledPass\",\n    value: function isLastEnabledPass(passIndex) {\n      for (var i = passIndex + 1; i < this.passes.length; i++) {\n        if (this.passes[i].enabled) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render(deltaTime) {\n      // deltaTime value is in seconds\n      if (deltaTime === undefined) {\n        deltaTime = this.clock.getDelta();\n      }\n\n      var currentRenderTarget = this.renderer.getRenderTarget();\n      var maskActive = false;\n\n      for (var i = 0, il = this.passes.length; i < il; i++) {\n        var pass = this.passes[i];\n        if (pass.enabled === false) continue;\n        pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n        pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n        if (pass.needsSwap) {\n          if (maskActive) {\n            var context = this.renderer.getContext();\n            var stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n            stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n            this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n            stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n          }\n\n          this.swapBuffers();\n        }\n\n        if (MaskPass !== undefined) {\n          if (pass instanceof MaskPass) {\n            maskActive = true;\n          } else if (pass instanceof ClearMaskPass) {\n            maskActive = false;\n          }\n        }\n      }\n\n      this.renderer.setRenderTarget(currentRenderTarget);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(renderTarget) {\n      if (renderTarget === undefined) {\n        var size = this.renderer.getSize(new Vector2());\n        this._pixelRatio = this.renderer.getPixelRatio();\n        this._width = size.width;\n        this._height = size.height;\n        renderTarget = this.renderTarget1.clone();\n        renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      }\n\n      this.renderTarget1.dispose();\n      this.renderTarget2.dispose();\n      this.renderTarget1 = renderTarget;\n      this.renderTarget2 = renderTarget.clone();\n      this.writeBuffer = this.renderTarget1;\n      this.readBuffer = this.renderTarget2;\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this._width = width;\n      this._height = height;\n      var effectiveWidth = this._width * this._pixelRatio;\n      var effectiveHeight = this._height * this._pixelRatio;\n      this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n      this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n      for (var i = 0; i < this.passes.length; i++) {\n        this.passes[i].setSize(effectiveWidth, effectiveHeight);\n      }\n    }\n  }, {\n    key: \"setPixelRatio\",\n    value: function setPixelRatio(pixelRatio) {\n      this._pixelRatio = pixelRatio;\n      this.setSize(this._width, this._height);\n    }\n  }]);\n\n  return EffectComposer;\n}();\n\nvar Pass = /*#__PURE__*/function () {\n  function Pass() {\n    _classCallCheck(this, Pass);\n\n    // if set to true, the pass is processed by the composer\n    this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n    this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n    this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n    this.renderToScreen = false;\n  }\n\n  _createClass(Pass, [{\n    key: \"setSize\",\n    value: function\n      /* width, height */\n    setSize() {}\n  }, {\n    key: \"render\",\n    value: function\n      /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n    render() {\n      console.error('THREE.Pass: .render() must be implemented in derived pass.');\n    }\n  }]);\n\n  return Pass;\n}(); // Helper for passes that need to fill the viewport with a single quad.\n\n\nvar _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1); // https://github.com/mrdoob/three.js/pull/21358\n\n\nvar _geometry = new BufferGeometry();\n\n_geometry.setAttribute('position', new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\n\n_geometry.setAttribute('uv', new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\n\nvar FullScreenQuad = /*#__PURE__*/function () {\n  function FullScreenQuad(material) {\n    _classCallCheck(this, FullScreenQuad);\n\n    this._mesh = new Mesh(_geometry, material);\n  }\n\n  _createClass(FullScreenQuad, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._mesh.geometry.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer) {\n      renderer.render(this._mesh, _camera);\n    }\n  }, {\n    key: \"material\",\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  }]);\n\n  return FullScreenQuad;\n}();\n\nexport { EffectComposer, Pass, FullScreenQuad };","map":{"version":3,"names":["BufferGeometry","Clock","Float32BufferAttribute","Mesh","OrthographicCamera","Vector2","WebGLRenderTarget","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","renderer","renderTarget","undefined","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","console","error","copyPass","clock","tmp","pass","push","setSize","index","splice","indexOf","passIndex","i","length","enabled","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","isLastEnabledPass","render","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","swapBuffers","setRenderTarget","dispose","effectiveWidth","effectiveHeight","pixelRatio","Pass","clear","_camera","_geometry","setAttribute","FullScreenQuad","material","_mesh","geometry","value"],"sources":["X:/Project/graph/node_modules/three/examples/jsm/postprocessing/EffectComposer.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tMesh,\n\tOrthographicCamera,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}