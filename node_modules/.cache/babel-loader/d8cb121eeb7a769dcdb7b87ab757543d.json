{"ast":null,"code":"/**\n * Flat-shaded ocean primitive.\n *\n * Based on a Codrops tutorial:\n * http://tympanus.net/codrops/2016/04/26/the-aviator-animating-basic-3d-scene-threejs/\n */\nmodule.exports.Primitive = AFRAME.registerPrimitive('a-ocean', {\n  defaultComponents: {\n    ocean: {},\n    rotation: {\n      x: -90,\n      y: 0,\n      z: 0\n    }\n  },\n  mappings: {\n    width: 'ocean.width',\n    depth: 'ocean.depth',\n    density: 'ocean.density',\n    amplitude: 'ocean.amplitude',\n    amplitudeVariance: 'ocean.amplitudeVariance',\n    speed: 'ocean.speed',\n    speedVariance: 'ocean.speedVariance',\n    color: 'ocean.color',\n    opacity: 'ocean.opacity'\n  }\n});\nmodule.exports.Component = AFRAME.registerComponent('ocean', {\n  schema: {\n    // Dimensions of the ocean area.\n    width: {\n      default: 10,\n      min: 0\n    },\n    depth: {\n      default: 10,\n      min: 0\n    },\n    // Density of waves.\n    density: {\n      default: 10\n    },\n    // Wave amplitude and variance.\n    amplitude: {\n      default: 0.1\n    },\n    amplitudeVariance: {\n      default: 0.3\n    },\n    // Wave speed and variance.\n    speed: {\n      default: 1\n    },\n    speedVariance: {\n      default: 2\n    },\n    // Material.\n    color: {\n      default: '#7AD2F7',\n      type: 'color'\n    },\n    opacity: {\n      default: 0.8\n    }\n  },\n\n  /**\n   * Use play() instead of init(), because component mappings – unavailable as dependencies – are\n   * not guaranteed to have parsed when this component is initialized.\n   */\n  play: function play() {\n    var el = this.el,\n        data = this.data;\n    var material = el.components.material;\n    var geometry = new THREE.PlaneGeometry(data.width, data.depth, data.density, data.density);\n    geometry.mergeVertices();\n    this.waves = [];\n\n    for (var v, i = 0, l = geometry.vertices.length; i < l; i++) {\n      v = geometry.vertices[i];\n      this.waves.push({\n        z: v.z,\n        ang: Math.random() * Math.PI * 2,\n        amp: data.amplitude + Math.random() * data.amplitudeVariance,\n        speed: (data.speed + Math.random() * data.speedVariance) / 1000 // radians / frame\n\n      });\n    }\n\n    if (!material) {\n      material = {};\n      material.material = new THREE.MeshPhongMaterial({\n        color: data.color,\n        transparent: data.opacity < 1,\n        opacity: data.opacity,\n        shading: THREE.FlatShading\n      });\n    }\n\n    this.mesh = new THREE.Mesh(geometry, material.material);\n    el.setObject3D('mesh', this.mesh);\n  },\n  remove: function remove() {\n    this.el.removeObject3D('mesh');\n  },\n  tick: function tick(t, dt) {\n    if (!dt) return;\n    var verts = this.mesh.geometry.vertices;\n\n    for (var v, vprops, i = 0; v = verts[i]; i++) {\n      vprops = this.waves[i];\n      v.z = vprops.z + Math.sin(vprops.ang) * vprops.amp;\n      vprops.ang += vprops.speed * dt;\n    }\n\n    this.mesh.geometry.verticesNeedUpdate = true;\n  }\n});","map":{"version":3,"names":["module","exports","Primitive","AFRAME","registerPrimitive","defaultComponents","ocean","rotation","x","y","z","mappings","width","depth","density","amplitude","amplitudeVariance","speed","speedVariance","color","opacity","Component","registerComponent","schema","default","min","type","play","el","data","material","components","geometry","THREE","PlaneGeometry","mergeVertices","waves","v","i","l","vertices","length","push","ang","Math","random","PI","amp","MeshPhongMaterial","transparent","shading","FlatShading","mesh","Mesh","setObject3D","remove","removeObject3D","tick","t","dt","verts","vprops","sin","verticesNeedUpdate"],"sources":["X:/Project/back/node_modules/aframe-extras/src/primitives/a-ocean.js"],"sourcesContent":["/**\n * Flat-shaded ocean primitive.\n *\n * Based on a Codrops tutorial:\n * http://tympanus.net/codrops/2016/04/26/the-aviator-animating-basic-3d-scene-threejs/\n */\nmodule.exports.Primitive = AFRAME.registerPrimitive('a-ocean', {\n  defaultComponents: {\n    ocean: {},\n    rotation: {x: -90, y: 0, z: 0}\n  },\n  mappings: {\n    width: 'ocean.width',\n    depth: 'ocean.depth',\n    density: 'ocean.density',\n    amplitude: 'ocean.amplitude',\n    amplitudeVariance: 'ocean.amplitudeVariance',\n    speed: 'ocean.speed',\n    speedVariance: 'ocean.speedVariance',\n    color: 'ocean.color',\n    opacity: 'ocean.opacity'\n  }\n});\n\nmodule.exports.Component = AFRAME.registerComponent('ocean', {\n  schema: {\n    // Dimensions of the ocean area.\n    width: {default: 10, min: 0},\n    depth: {default: 10, min: 0},\n\n    // Density of waves.\n    density: {default: 10},\n\n    // Wave amplitude and variance.\n    amplitude: {default: 0.1},\n    amplitudeVariance: {default: 0.3},\n\n    // Wave speed and variance.\n    speed: {default: 1},\n    speedVariance: {default: 2},\n\n    // Material.\n    color: {default: '#7AD2F7', type: 'color'},\n    opacity: {default: 0.8}\n  },\n\n  /**\n   * Use play() instead of init(), because component mappings – unavailable as dependencies – are\n   * not guaranteed to have parsed when this component is initialized.\n   */\n  play: function () {\n    const el = this.el,\n        data = this.data;\n    let material = el.components.material;\n\n    const geometry = new THREE.PlaneGeometry(data.width, data.depth, data.density, data.density);\n    geometry.mergeVertices();\n    this.waves = [];\n    for (let v, i = 0, l = geometry.vertices.length; i < l; i++) {\n      v = geometry.vertices[i];\n      this.waves.push({\n        z: v.z,\n        ang: Math.random() * Math.PI * 2,\n        amp: data.amplitude + Math.random() * data.amplitudeVariance,\n        speed: (data.speed + Math.random() * data.speedVariance) / 1000 // radians / frame\n      });\n    }\n\n    if (!material) {\n      material = {};\n      material.material = new THREE.MeshPhongMaterial({\n        color: data.color,\n        transparent: data.opacity < 1,\n        opacity: data.opacity,\n        shading: THREE.FlatShading,\n      });\n    }\n\n    this.mesh = new THREE.Mesh(geometry, material.material);\n    el.setObject3D('mesh', this.mesh);\n  },\n\n  remove: function () {\n    this.el.removeObject3D('mesh');\n  },\n\n  tick: function (t, dt) {\n    if (!dt) return;\n\n    const verts = this.mesh.geometry.vertices;\n    for (let v, vprops, i = 0; (v = verts[i]); i++){\n      vprops = this.waves[i];\n      v.z = vprops.z + Math.sin(vprops.ang) * vprops.amp;\n      vprops.ang += vprops.speed * dt;\n    }\n    this.mesh.geometry.verticesNeedUpdate = true;\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}