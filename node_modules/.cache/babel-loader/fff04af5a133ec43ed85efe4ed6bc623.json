{"ast":null,"code":"var EPS = 0.1;\nmodule.exports = AFRAME.registerComponent('checkpoint-controls', {\n  schema: {\n    enabled: {\n      default: true\n    },\n    mode: {\n      default: 'teleport',\n      oneOf: ['teleport', 'animate']\n    },\n    animateSpeed: {\n      default: 3.0\n    }\n  },\n  init: function init() {\n    this.active = true;\n    this.checkpoint = null;\n    this.isNavMeshConstrained = false;\n    this.offset = new THREE.Vector3();\n    this.position = new THREE.Vector3();\n    this.targetPosition = new THREE.Vector3();\n  },\n  play: function play() {\n    this.active = true;\n  },\n  pause: function pause() {\n    this.active = false;\n  },\n  setCheckpoint: function setCheckpoint(checkpoint) {\n    var el = this.el;\n    if (!this.active) return;\n    if (this.checkpoint === checkpoint) return;\n\n    if (this.checkpoint) {\n      el.emit('navigation-end', {\n        checkpoint: this.checkpoint\n      });\n    }\n\n    this.checkpoint = checkpoint;\n    this.sync(); // Ignore new checkpoint if we're already there.\n\n    if (this.position.distanceTo(this.targetPosition) < EPS) {\n      this.checkpoint = null;\n      return;\n    }\n\n    el.emit('navigation-start', {\n      checkpoint: checkpoint\n    });\n\n    if (this.data.mode === 'teleport') {\n      this.el.setAttribute('position', this.targetPosition);\n      this.checkpoint = null;\n      el.emit('navigation-end', {\n        checkpoint: checkpoint\n      });\n      el.components['movement-controls'].updateNavLocation();\n    }\n  },\n  isVelocityActive: function isVelocityActive() {\n    return !!(this.active && this.checkpoint);\n  },\n  getVelocity: function getVelocity() {\n    if (!this.active) return;\n    var data = this.data;\n    var offset = this.offset;\n    var position = this.position;\n    var targetPosition = this.targetPosition;\n    var checkpoint = this.checkpoint;\n    this.sync();\n\n    if (position.distanceTo(targetPosition) < EPS) {\n      this.checkpoint = null;\n      this.el.emit('navigation-end', {\n        checkpoint: checkpoint\n      });\n      return offset.set(0, 0, 0);\n    }\n\n    offset.setLength(data.animateSpeed);\n    return offset;\n  },\n  sync: function sync() {\n    var offset = this.offset;\n    var position = this.position;\n    var targetPosition = this.targetPosition;\n    position.copy(this.el.getAttribute('position'));\n    this.checkpoint.object3D.getWorldPosition(targetPosition);\n    targetPosition.add(this.checkpoint.components.checkpoint.getOffset());\n    offset.copy(targetPosition).sub(position);\n  }\n});","map":{"version":3,"names":["EPS","module","exports","AFRAME","registerComponent","schema","enabled","default","mode","oneOf","animateSpeed","init","active","checkpoint","isNavMeshConstrained","offset","THREE","Vector3","position","targetPosition","play","pause","setCheckpoint","el","emit","sync","distanceTo","data","setAttribute","components","updateNavLocation","isVelocityActive","getVelocity","set","setLength","copy","getAttribute","object3D","getWorldPosition","add","getOffset","sub"],"sources":["X:/Project/back/node_modules/aframe-extras/src/controls/checkpoint-controls.js"],"sourcesContent":["const EPS = 0.1;\n\nmodule.exports = AFRAME.registerComponent('checkpoint-controls', {\n  schema: {\n    enabled: {default: true},\n    mode: {default: 'teleport', oneOf: ['teleport', 'animate']},\n    animateSpeed: {default: 3.0}\n  },\n\n  init: function () {\n    this.active = true;\n    this.checkpoint = null;\n\n    this.isNavMeshConstrained = false;\n\n    this.offset = new THREE.Vector3();\n    this.position = new THREE.Vector3();\n    this.targetPosition = new THREE.Vector3();\n  },\n\n  play: function () { this.active = true; },\n  pause: function () { this.active = false; },\n\n  setCheckpoint: function (checkpoint) {\n    const el = this.el;\n\n    if (!this.active) return;\n    if (this.checkpoint === checkpoint) return;\n\n    if (this.checkpoint) {\n      el.emit('navigation-end', {checkpoint: this.checkpoint});\n    }\n\n    this.checkpoint = checkpoint;\n    this.sync();\n\n    // Ignore new checkpoint if we're already there.\n    if (this.position.distanceTo(this.targetPosition) < EPS) {\n      this.checkpoint = null;\n      return;\n    }\n\n    el.emit('navigation-start', {checkpoint: checkpoint});\n\n    if (this.data.mode === 'teleport') {\n      this.el.setAttribute('position', this.targetPosition);\n      this.checkpoint = null;\n      el.emit('navigation-end', {checkpoint: checkpoint});\n      el.components['movement-controls'].updateNavLocation();\n    }\n  },\n\n  isVelocityActive: function () {\n    return !!(this.active && this.checkpoint);\n  },\n\n  getVelocity: function () {\n    if (!this.active) return;\n\n    const data = this.data;\n    const offset = this.offset;\n    const position = this.position;\n    const targetPosition = this.targetPosition;\n    const checkpoint = this.checkpoint;\n\n    this.sync();\n    if (position.distanceTo(targetPosition) < EPS) {\n      this.checkpoint = null;\n      this.el.emit('navigation-end', {checkpoint: checkpoint});\n      return offset.set(0, 0, 0);\n    }\n    offset.setLength(data.animateSpeed);\n    return offset;\n  },\n\n  sync: function () {\n    const offset = this.offset;\n    const position = this.position;\n    const targetPosition = this.targetPosition;\n\n    position.copy(this.el.getAttribute('position'));\n    this.checkpoint.object3D.getWorldPosition(targetPosition);\n    targetPosition.add(this.checkpoint.components.checkpoint.getOffset());\n    offset.copy(targetPosition).sub(position);\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}