{"ast":null,"code":"var LoopMode = {\n  once: THREE.LoopOnce,\n  repeat: THREE.LoopRepeat,\n  pingpong: THREE.LoopPingPong\n};\n/**\n * animation-mixer\n *\n * Player for animation clips. Intended to be compatible with any model format that supports\n * skeletal or morph animations through THREE.AnimationMixer.\n * See: https://threejs.org/docs/?q=animation#Reference/Animation/AnimationMixer\n */\n\nmodule.exports = AFRAME.registerComponent('animation-mixer', {\n  schema: {\n    clip: {\n      default: '*'\n    },\n    duration: {\n      default: 0\n    },\n    clampWhenFinished: {\n      default: false,\n      type: 'boolean'\n    },\n    crossFadeDuration: {\n      default: 0\n    },\n    loop: {\n      default: 'repeat',\n      oneOf: Object.keys(LoopMode)\n    },\n    repetitions: {\n      default: Infinity,\n      min: 0\n    },\n    timeScale: {\n      default: 1\n    }\n  },\n  init: function init() {\n    var _this = this;\n\n    /** @type {THREE.Mesh} */\n    this.model = null;\n    /** @type {THREE.AnimationMixer} */\n\n    this.mixer = null;\n    /** @type {Array<THREE.AnimationAction>} */\n\n    this.activeActions = [];\n    var model = this.el.getObject3D('mesh');\n\n    if (model) {\n      this.load(model);\n    } else {\n      this.el.addEventListener('model-loaded', function (e) {\n        _this.load(e.detail.model);\n      });\n    }\n  },\n  load: function load(model) {\n    var el = this.el;\n    this.model = model;\n    this.mixer = new THREE.AnimationMixer(model);\n    this.mixer.addEventListener('loop', function (e) {\n      el.emit('animation-loop', {\n        action: e.action,\n        loopDelta: e.loopDelta\n      });\n    });\n    this.mixer.addEventListener('finished', function (e) {\n      el.emit('animation-finished', {\n        action: e.action,\n        direction: e.direction\n      });\n    });\n    if (this.data.clip) this.update({});\n  },\n  remove: function remove() {\n    if (this.mixer) this.mixer.stopAllAction();\n  },\n  update: function update(prevData) {\n    if (!prevData) return;\n    var data = this.data;\n    var changes = AFRAME.utils.diff(data, prevData); // If selected clips have changed, restart animation.\n\n    if ('clip' in changes) {\n      this.stopAction();\n      if (data.clip) this.playAction();\n      return;\n    } // Otherwise, modify running actions.\n\n\n    this.activeActions.forEach(function (action) {\n      if ('duration' in changes && data.duration) {\n        action.setDuration(data.duration);\n      }\n\n      if ('clampWhenFinished' in changes) {\n        action.clampWhenFinished = data.clampWhenFinished;\n      }\n\n      if ('loop' in changes || 'repetitions' in changes) {\n        action.setLoop(LoopMode[data.loop], data.repetitions);\n      }\n\n      if ('timeScale' in changes) {\n        action.setEffectiveTimeScale(data.timeScale);\n      }\n    });\n  },\n  stopAction: function stopAction() {\n    var data = this.data;\n\n    for (var i = 0; i < this.activeActions.length; i++) {\n      data.crossFadeDuration ? this.activeActions[i].fadeOut(data.crossFadeDuration) : this.activeActions[i].stop();\n    }\n\n    this.activeActions.length = 0;\n  },\n  playAction: function playAction() {\n    if (!this.mixer) return;\n    var model = this.model,\n        data = this.data,\n        clips = model.animations || (model.geometry || {}).animations || [];\n    if (!clips.length) return;\n    var re = wildcardToRegExp(data.clip);\n\n    for (var clip, i = 0; clip = clips[i]; i++) {\n      if (clip.name.match(re)) {\n        var action = this.mixer.clipAction(clip, model);\n        action.enabled = true;\n        action.clampWhenFinished = data.clampWhenFinished;\n        if (data.duration) action.setDuration(data.duration);\n        if (data.timeScale !== 1) action.setEffectiveTimeScale(data.timeScale);\n        action.setLoop(LoopMode[data.loop], data.repetitions).fadeIn(data.crossFadeDuration).play();\n        this.activeActions.push(action);\n      }\n    }\n  },\n  tick: function tick(t, dt) {\n    if (this.mixer && !isNaN(dt)) this.mixer.update(dt / 1000);\n  }\n});\n/**\n * Creates a RegExp from the given string, converting asterisks to .* expressions,\n * and escaping all other characters.\n */\n\nfunction wildcardToRegExp(s) {\n  return new RegExp('^' + s.split(/\\*+/).map(regExpEscape).join('.*') + '$');\n}\n/**\n * RegExp-escapes all characters in the given string.\n */\n\n\nfunction regExpEscape(s) {\n  return s.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n}","map":{"version":3,"names":["LoopMode","once","THREE","LoopOnce","repeat","LoopRepeat","pingpong","LoopPingPong","module","exports","AFRAME","registerComponent","schema","clip","default","duration","clampWhenFinished","type","crossFadeDuration","loop","oneOf","Object","keys","repetitions","Infinity","min","timeScale","init","model","mixer","activeActions","el","getObject3D","load","addEventListener","e","detail","AnimationMixer","emit","action","loopDelta","direction","data","update","remove","stopAllAction","prevData","changes","utils","diff","stopAction","playAction","forEach","setDuration","setLoop","setEffectiveTimeScale","i","length","fadeOut","stop","clips","animations","geometry","re","wildcardToRegExp","name","match","clipAction","enabled","fadeIn","play","push","tick","t","dt","isNaN","s","RegExp","split","map","regExpEscape","join","replace"],"sources":["X:/Project/back/node_modules/aframe-extras/src/loaders/animation-mixer.js"],"sourcesContent":["const LoopMode = {\n  once: THREE.LoopOnce,\n  repeat: THREE.LoopRepeat,\n  pingpong: THREE.LoopPingPong\n};\n\n/**\n * animation-mixer\n *\n * Player for animation clips. Intended to be compatible with any model format that supports\n * skeletal or morph animations through THREE.AnimationMixer.\n * See: https://threejs.org/docs/?q=animation#Reference/Animation/AnimationMixer\n */\nmodule.exports = AFRAME.registerComponent('animation-mixer', {\n  schema: {\n    clip:  {default: '*'},\n    duration: {default: 0},\n    clampWhenFinished: {default: false, type: 'boolean'},\n    crossFadeDuration: {default: 0},\n    loop: {default: 'repeat', oneOf: Object.keys(LoopMode)},\n    repetitions: {default: Infinity, min: 0},\n    timeScale: {default: 1}\n  },\n\n  init: function () {\n    /** @type {THREE.Mesh} */\n    this.model = null;\n    /** @type {THREE.AnimationMixer} */\n    this.mixer = null;\n    /** @type {Array<THREE.AnimationAction>} */\n    this.activeActions = [];\n\n    const model = this.el.getObject3D('mesh');\n\n    if (model) {\n      this.load(model);\n    } else {\n      this.el.addEventListener('model-loaded', (e) => {\n        this.load(e.detail.model);\n      });\n    }\n  },\n\n  load: function (model) {\n    const el = this.el;\n    this.model = model;\n    this.mixer = new THREE.AnimationMixer(model);\n    this.mixer.addEventListener('loop', (e) => {\n      el.emit('animation-loop', {action: e.action, loopDelta: e.loopDelta});\n    });\n    this.mixer.addEventListener('finished', (e) => {\n      el.emit('animation-finished', {action: e.action, direction: e.direction});\n    });\n    if (this.data.clip) this.update({});\n  },\n\n  remove: function () {\n    if (this.mixer) this.mixer.stopAllAction();\n  },\n\n  update: function (prevData) {\n    if (!prevData) return;\n\n    const data = this.data;\n    const changes = AFRAME.utils.diff(data, prevData);\n\n    // If selected clips have changed, restart animation.\n    if ('clip' in changes) {\n      this.stopAction();\n      if (data.clip) this.playAction();\n      return;\n    }\n\n    // Otherwise, modify running actions.\n    this.activeActions.forEach((action) => {\n      if ('duration' in changes && data.duration) {\n        action.setDuration(data.duration);\n      }\n      if ('clampWhenFinished' in changes) {\n        action.clampWhenFinished = data.clampWhenFinished;\n      }\n      if ('loop' in changes || 'repetitions' in changes) {\n        action.setLoop(LoopMode[data.loop], data.repetitions);\n      }\n      if ('timeScale' in changes) {\n        action.setEffectiveTimeScale(data.timeScale);\n      }\n    });\n  },\n\n  stopAction: function () {\n    const data = this.data;\n    for (let i = 0; i < this.activeActions.length; i++) {\n      data.crossFadeDuration\n        ? this.activeActions[i].fadeOut(data.crossFadeDuration)\n        : this.activeActions[i].stop();\n    }\n    this.activeActions.length = 0;\n  },\n\n  playAction: function () {\n    if (!this.mixer) return;\n\n    const model = this.model,\n        data = this.data,\n        clips = model.animations || (model.geometry || {}).animations || [];\n\n    if (!clips.length) return;\n\n    const re = wildcardToRegExp(data.clip);\n\n    for (let clip, i = 0; (clip = clips[i]); i++) {\n      if (clip.name.match(re)) {\n        const action = this.mixer.clipAction(clip, model);\n        action.enabled = true;\n        action.clampWhenFinished = data.clampWhenFinished;\n        if (data.duration) action.setDuration(data.duration);\n        if (data.timeScale !== 1) action.setEffectiveTimeScale(data.timeScale);\n        action\n          .setLoop(LoopMode[data.loop], data.repetitions)\n          .fadeIn(data.crossFadeDuration)\n          .play();\n        this.activeActions.push(action);\n      }\n    }\n  },\n\n  tick: function (t, dt) {\n    if (this.mixer && !isNaN(dt)) this.mixer.update(dt / 1000);\n  }\n});\n\n/**\n * Creates a RegExp from the given string, converting asterisks to .* expressions,\n * and escaping all other characters.\n */\nfunction wildcardToRegExp (s) {\n  return new RegExp('^' + s.split(/\\*+/).map(regExpEscape).join('.*') + '$');\n}\n\n/**\n * RegExp-escapes all characters in the given string.\n */\nfunction regExpEscape (s) {\n  return s.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}