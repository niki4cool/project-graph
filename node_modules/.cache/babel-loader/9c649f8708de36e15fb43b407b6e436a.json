{"ast":null,"code":"module.exports = createLayout;\nmodule.exports.simulator = require('./lib/createPhysicsSimulator');\n\nvar eventify = require('ngraph.events');\n/**\n * Creates force based layout for a given graph.\n *\n * @param {ngraph.graph} graph which needs to be laid out\n * @param {object} physicsSettings if you need custom settings\n * for physics simulator you can pass your own settings here. If it's not passed\n * a default one will be created.\n */\n\n\nfunction createLayout(graph, physicsSettings) {\n  if (!graph) {\n    throw new Error('Graph structure cannot be undefined');\n  }\n\n  var createSimulator = physicsSettings && physicsSettings.createSimulator || require('./lib/createPhysicsSimulator');\n\n  var physicsSimulator = createSimulator(physicsSettings);\n  if (Array.isArray(physicsSettings)) throw new Error('Physics settings is expected to be an object');\n  var nodeMass = graph.version > 19 ? defaultSetNodeMass : defaultArrayNodeMass;\n\n  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {\n    nodeMass = physicsSettings.nodeMass;\n  }\n\n  var nodeBodies = new Map();\n  var springs = {};\n  var bodiesCount = 0;\n  var springTransform = physicsSimulator.settings.springTransform || noop; // Initialize physics with what we have in the graph:\n\n  initPhysics();\n  listenToEvents();\n  var wasStable = false;\n  var api = {\n    /**\n     * Performs one step of iterative layout algorithm\n     *\n     * @returns {boolean} true if the system should be considered stable; False otherwise.\n     * The system is stable if no further call to `step()` can improve the layout.\n     */\n    step: function step() {\n      if (bodiesCount === 0) {\n        updateStableStatus(true);\n        return true;\n      }\n\n      var lastMove = physicsSimulator.step(); // Save the movement in case if someone wants to query it in the step\n      // callback.\n\n      api.lastMove = lastMove; // Allow listeners to perform low-level actions after nodes are updated.\n\n      api.fire('step');\n      var ratio = lastMove / bodiesCount;\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\n\n      updateStableStatus(isStableNow);\n      return isStableNow;\n    },\n\n    /**\n     * For a given `nodeId` returns position\n     */\n    getNodePosition: function getNodePosition(nodeId) {\n      return getInitializedBody(nodeId).pos;\n    },\n\n    /**\n     * Sets position of a node to a given coordinates\n     * @param {string} nodeId node identifier\n     * @param {number} x position of a node\n     * @param {number} y position of a node\n     * @param {number=} z position of node (only if applicable to body)\n     */\n    setNodePosition: function setNodePosition(nodeId) {\n      var body = getInitializedBody(nodeId);\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\n    },\n\n    /**\n     * @returns {Object} Link position by link id\n     * @returns {Object.from} {x, y} coordinates of link start\n     * @returns {Object.to} {x, y} coordinates of link end\n     */\n    getLinkPosition: function getLinkPosition(linkId) {\n      var spring = springs[linkId];\n\n      if (spring) {\n        return {\n          from: spring.from.pos,\n          to: spring.to.pos\n        };\n      }\n    },\n\n    /**\n     * @returns {Object} area required to fit in the graph. Object contains\n     * `x1`, `y1` - top left coordinates\n     * `x2`, `y2` - bottom right coordinates\n     */\n    getGraphRect: function getGraphRect() {\n      return physicsSimulator.getBBox();\n    },\n\n    /**\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\n     */\n    forEachBody: forEachBody,\n\n    /*\n     * Requests layout algorithm to pin/unpin node to its current position\n     * Pinned nodes should not be affected by layout algorithm and always\n     * remain at their position\n     */\n    pinNode: function pinNode(node, isPinned) {\n      var body = getInitializedBody(node.id);\n      body.isPinned = !!isPinned;\n    },\n\n    /**\n     * Checks whether given graph's node is currently pinned\n     */\n    isNodePinned: function isNodePinned(node) {\n      return getInitializedBody(node.id).isPinned;\n    },\n\n    /**\n     * Request to release all resources\n     */\n    dispose: function dispose() {\n      graph.off('changed', onGraphChanged);\n      api.fire('disposed');\n    },\n\n    /**\n     * Gets physical body for a given node id. If node is not found undefined\n     * value is returned.\n     */\n    getBody: getBody,\n\n    /**\n     * Gets spring for a given edge.\n     *\n     * @param {string} linkId link identifer. If two arguments are passed then\n     * this argument is treated as formNodeId\n     * @param {string=} toId when defined this parameter denotes head of the link\n     * and first argument is treated as tail of the link (fromId)\n     */\n    getSpring: getSpring,\n\n    /**\n     * Returns length of cumulative force vector. The closer this to zero - the more stable the system is\n     */\n    getForceVectorLength: getForceVectorLength,\n\n    /**\n     * [Read only] Gets current physics simulator\n     */\n    simulator: physicsSimulator,\n\n    /**\n     * Gets the graph that was used for layout\n     */\n    graph: graph,\n\n    /**\n     * Gets amount of movement performed during last step operation\n     */\n    lastMove: 0\n  };\n  eventify(api);\n  return api;\n\n  function updateStableStatus(isStableNow) {\n    if (wasStable !== isStableNow) {\n      wasStable = isStableNow;\n      onStableChanged(isStableNow);\n    }\n  }\n\n  function forEachBody(cb) {\n    nodeBodies.forEach(cb);\n  }\n\n  function getForceVectorLength() {\n    var fx = 0,\n        fy = 0;\n    forEachBody(function (body) {\n      fx += Math.abs(body.force.x);\n      fy += Math.abs(body.force.y);\n    });\n    return Math.sqrt(fx * fx + fy * fy);\n  }\n\n  function getSpring(fromId, toId) {\n    var linkId;\n\n    if (toId === undefined) {\n      if (typeof fromId !== 'object') {\n        // assume fromId as a linkId:\n        linkId = fromId;\n      } else {\n        // assume fromId to be a link object:\n        linkId = fromId.id;\n      }\n    } else {\n      // toId is defined, should grab link:\n      var link = graph.hasLink(fromId, toId);\n      if (!link) return;\n      linkId = link.id;\n    }\n\n    return springs[linkId];\n  }\n\n  function getBody(nodeId) {\n    return nodeBodies.get(nodeId);\n  }\n\n  function listenToEvents() {\n    graph.on('changed', onGraphChanged);\n  }\n\n  function onStableChanged(isStable) {\n    api.fire('stable', isStable);\n  }\n\n  function onGraphChanged(changes) {\n    for (var i = 0; i < changes.length; ++i) {\n      var change = changes[i];\n\n      if (change.changeType === 'add') {\n        if (change.node) {\n          initBody(change.node.id);\n        }\n\n        if (change.link) {\n          initLink(change.link);\n        }\n      } else if (change.changeType === 'remove') {\n        if (change.node) {\n          releaseNode(change.node);\n        }\n\n        if (change.link) {\n          releaseLink(change.link);\n        }\n      }\n    }\n\n    bodiesCount = graph.getNodesCount();\n  }\n\n  function initPhysics() {\n    bodiesCount = 0;\n    graph.forEachNode(function (node) {\n      initBody(node.id);\n      bodiesCount += 1;\n    });\n    graph.forEachLink(initLink);\n  }\n\n  function initBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n\n    if (!body) {\n      var node = graph.getNode(nodeId);\n\n      if (!node) {\n        throw new Error('initBody() was called with unknown node id');\n      }\n\n      var pos = node.position;\n\n      if (!pos) {\n        var neighbors = getNeighborBodies(node);\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\n      }\n\n      body = physicsSimulator.addBodyAt(pos);\n      body.id = nodeId;\n      nodeBodies.set(nodeId, body);\n      updateBodyMass(nodeId);\n\n      if (isNodeOriginallyPinned(node)) {\n        body.isPinned = true;\n      }\n    }\n  }\n\n  function releaseNode(node) {\n    var nodeId = node.id;\n    var body = nodeBodies.get(nodeId);\n\n    if (body) {\n      nodeBodies.delete(nodeId);\n      physicsSimulator.removeBody(body);\n    }\n  }\n\n  function initLink(link) {\n    updateBodyMass(link.fromId);\n    updateBodyMass(link.toId);\n    var fromBody = nodeBodies.get(link.fromId),\n        toBody = nodeBodies.get(link.toId),\n        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\n    springTransform(link, spring);\n    springs[link.id] = spring;\n  }\n\n  function releaseLink(link) {\n    var spring = springs[link.id];\n\n    if (spring) {\n      var from = graph.getNode(link.fromId),\n          to = graph.getNode(link.toId);\n      if (from) updateBodyMass(from.id);\n      if (to) updateBodyMass(to.id);\n      delete springs[link.id];\n      physicsSimulator.removeSpring(spring);\n    }\n  }\n\n  function getNeighborBodies(node) {\n    // TODO: Could probably be done better on memory\n    var neighbors = [];\n\n    if (!node.links) {\n      return neighbors;\n    }\n\n    var maxNeighbors = Math.min(node.links.length, 2);\n\n    for (var i = 0; i < maxNeighbors; ++i) {\n      var link = node.links[i];\n      var otherBody = link.fromId !== node.id ? nodeBodies.get(link.fromId) : nodeBodies.get(link.toId);\n\n      if (otherBody && otherBody.pos) {\n        neighbors.push(otherBody);\n      }\n    }\n\n    return neighbors;\n  }\n\n  function updateBodyMass(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    body.mass = nodeMass(nodeId);\n\n    if (Number.isNaN(body.mass)) {\n      throw new Error('Node mass should be a number');\n    }\n  }\n  /**\n   * Checks whether graph node has in its settings pinned attribute,\n   * which means layout algorithm cannot move it. Node can be marked\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\n   *\n   * @param {Object} node a graph node to check\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\n   */\n\n\n  function isNodeOriginallyPinned(node) {\n    return node && (node.isPinned || node.data && node.data.isPinned);\n  }\n\n  function getInitializedBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n\n    if (!body) {\n      initBody(nodeId);\n      body = nodeBodies.get(nodeId);\n    }\n\n    return body;\n  }\n  /**\n   * Calculates mass of a body, which corresponds to node with given id.\n   *\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\n   * @returns {Number} recommended mass of the body;\n   */\n\n\n  function defaultArrayNodeMass(nodeId) {\n    // This function is for older versions of ngraph.graph.\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.length / 3.0;\n  }\n\n  function defaultSetNodeMass(nodeId) {\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.size / 3.0;\n  }\n}\n\nfunction noop() {}","map":{"version":3,"names":["module","exports","createLayout","simulator","require","eventify","graph","physicsSettings","Error","createSimulator","physicsSimulator","Array","isArray","nodeMass","version","defaultSetNodeMass","defaultArrayNodeMass","nodeBodies","Map","springs","bodiesCount","springTransform","settings","noop","initPhysics","listenToEvents","wasStable","api","step","updateStableStatus","lastMove","fire","ratio","isStableNow","getNodePosition","nodeId","getInitializedBody","pos","setNodePosition","body","setPosition","apply","prototype","slice","call","arguments","getLinkPosition","linkId","spring","from","to","getGraphRect","getBBox","forEachBody","pinNode","node","isPinned","id","isNodePinned","dispose","off","onGraphChanged","getBody","getSpring","getForceVectorLength","onStableChanged","cb","forEach","fx","fy","Math","abs","force","x","y","sqrt","fromId","toId","undefined","link","hasLink","get","on","isStable","changes","i","length","change","changeType","initBody","initLink","releaseNode","releaseLink","getNodesCount","forEachNode","forEachLink","getNode","position","neighbors","getNeighborBodies","getBestNewBodyPosition","addBodyAt","set","updateBodyMass","isNodeOriginallyPinned","delete","removeBody","fromBody","toBody","addSpring","removeSpring","links","maxNeighbors","min","otherBody","push","mass","Number","isNaN","data","getLinks","size"],"sources":["X:/Project/back/node_modules/ngraph.forcelayout/index.js"],"sourcesContent":["module.exports = createLayout;\nmodule.exports.simulator = require('./lib/createPhysicsSimulator');\n\nvar eventify = require('ngraph.events');\n\n/**\n * Creates force based layout for a given graph.\n *\n * @param {ngraph.graph} graph which needs to be laid out\n * @param {object} physicsSettings if you need custom settings\n * for physics simulator you can pass your own settings here. If it's not passed\n * a default one will be created.\n */\nfunction createLayout(graph, physicsSettings) {\n  if (!graph) {\n    throw new Error('Graph structure cannot be undefined');\n  }\n\n  var createSimulator = (physicsSettings && physicsSettings.createSimulator) || require('./lib/createPhysicsSimulator');\n  var physicsSimulator = createSimulator(physicsSettings);\n  if (Array.isArray(physicsSettings)) throw new Error('Physics settings is expected to be an object');\n\n  var nodeMass = graph.version > 19 ? defaultSetNodeMass : defaultArrayNodeMass;\n  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {\n    nodeMass = physicsSettings.nodeMass;\n  }\n\n  var nodeBodies = new Map();\n  var springs = {};\n  var bodiesCount = 0;\n\n  var springTransform = physicsSimulator.settings.springTransform || noop;\n\n  // Initialize physics with what we have in the graph:\n  initPhysics();\n  listenToEvents();\n\n  var wasStable = false;\n\n  var api = {\n    /**\n     * Performs one step of iterative layout algorithm\n     *\n     * @returns {boolean} true if the system should be considered stable; False otherwise.\n     * The system is stable if no further call to `step()` can improve the layout.\n     */\n    step: function() {\n      if (bodiesCount === 0) {\n        updateStableStatus(true);\n        return true;\n      }\n\n      var lastMove = physicsSimulator.step();\n\n      // Save the movement in case if someone wants to query it in the step\n      // callback.\n      api.lastMove = lastMove;\n\n      // Allow listeners to perform low-level actions after nodes are updated.\n      api.fire('step');\n\n      var ratio = lastMove/bodiesCount;\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\n      updateStableStatus(isStableNow);\n\n\n      return isStableNow;\n    },\n\n    /**\n     * For a given `nodeId` returns position\n     */\n    getNodePosition: function (nodeId) {\n      return getInitializedBody(nodeId).pos;\n    },\n\n    /**\n     * Sets position of a node to a given coordinates\n     * @param {string} nodeId node identifier\n     * @param {number} x position of a node\n     * @param {number} y position of a node\n     * @param {number=} z position of node (only if applicable to body)\n     */\n    setNodePosition: function (nodeId) {\n      var body = getInitializedBody(nodeId);\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\n    },\n\n    /**\n     * @returns {Object} Link position by link id\n     * @returns {Object.from} {x, y} coordinates of link start\n     * @returns {Object.to} {x, y} coordinates of link end\n     */\n    getLinkPosition: function (linkId) {\n      var spring = springs[linkId];\n      if (spring) {\n        return {\n          from: spring.from.pos,\n          to: spring.to.pos\n        };\n      }\n    },\n\n    /**\n     * @returns {Object} area required to fit in the graph. Object contains\n     * `x1`, `y1` - top left coordinates\n     * `x2`, `y2` - bottom right coordinates\n     */\n    getGraphRect: function () {\n      return physicsSimulator.getBBox();\n    },\n\n    /**\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\n     */\n    forEachBody: forEachBody,\n\n    /*\n     * Requests layout algorithm to pin/unpin node to its current position\n     * Pinned nodes should not be affected by layout algorithm and always\n     * remain at their position\n     */\n    pinNode: function (node, isPinned) {\n      var body = getInitializedBody(node.id);\n       body.isPinned = !!isPinned;\n    },\n\n    /**\n     * Checks whether given graph's node is currently pinned\n     */\n    isNodePinned: function (node) {\n      return getInitializedBody(node.id).isPinned;\n    },\n\n    /**\n     * Request to release all resources\n     */\n    dispose: function() {\n      graph.off('changed', onGraphChanged);\n      api.fire('disposed');\n    },\n\n    /**\n     * Gets physical body for a given node id. If node is not found undefined\n     * value is returned.\n     */\n    getBody: getBody,\n\n    /**\n     * Gets spring for a given edge.\n     *\n     * @param {string} linkId link identifer. If two arguments are passed then\n     * this argument is treated as formNodeId\n     * @param {string=} toId when defined this parameter denotes head of the link\n     * and first argument is treated as tail of the link (fromId)\n     */\n    getSpring: getSpring,\n\n    /**\n     * Returns length of cumulative force vector. The closer this to zero - the more stable the system is\n     */\n    getForceVectorLength: getForceVectorLength,\n\n    /**\n     * [Read only] Gets current physics simulator\n     */\n    simulator: physicsSimulator,\n\n    /**\n     * Gets the graph that was used for layout\n     */\n    graph: graph,\n\n    /**\n     * Gets amount of movement performed during last step operation\n     */\n    lastMove: 0\n  };\n\n  eventify(api);\n\n  return api;\n\n  function updateStableStatus(isStableNow) {\n    if (wasStable !== isStableNow) {\n      wasStable = isStableNow;\n      onStableChanged(isStableNow);\n    }\n  }\n\n  function forEachBody(cb) {\n    nodeBodies.forEach(cb);\n  }\n\n  function getForceVectorLength() {\n    var fx = 0, fy = 0;\n    forEachBody(function(body) {\n      fx += Math.abs(body.force.x);\n      fy += Math.abs(body.force.y);\n    });\n    return Math.sqrt(fx * fx + fy * fy);\n  }\n\n  function getSpring(fromId, toId) {\n    var linkId;\n    if (toId === undefined) {\n      if (typeof fromId !== 'object') {\n        // assume fromId as a linkId:\n        linkId = fromId;\n      } else {\n        // assume fromId to be a link object:\n        linkId = fromId.id;\n      }\n    } else {\n      // toId is defined, should grab link:\n      var link = graph.hasLink(fromId, toId);\n      if (!link) return;\n      linkId = link.id;\n    }\n\n    return springs[linkId];\n  }\n\n  function getBody(nodeId) {\n    return nodeBodies.get(nodeId);\n  }\n\n  function listenToEvents() {\n    graph.on('changed', onGraphChanged);\n  }\n\n  function onStableChanged(isStable) {\n    api.fire('stable', isStable);\n  }\n\n  function onGraphChanged(changes) {\n    for (var i = 0; i < changes.length; ++i) {\n      var change = changes[i];\n      if (change.changeType === 'add') {\n        if (change.node) {\n          initBody(change.node.id);\n        }\n        if (change.link) {\n          initLink(change.link);\n        }\n      } else if (change.changeType === 'remove') {\n        if (change.node) {\n          releaseNode(change.node);\n        }\n        if (change.link) {\n          releaseLink(change.link);\n        }\n      }\n    }\n    bodiesCount = graph.getNodesCount();\n  }\n\n  function initPhysics() {\n    bodiesCount = 0;\n\n    graph.forEachNode(function (node) {\n      initBody(node.id);\n      bodiesCount += 1;\n    });\n\n    graph.forEachLink(initLink);\n  }\n\n  function initBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      var node = graph.getNode(nodeId);\n      if (!node) {\n        throw new Error('initBody() was called with unknown node id');\n      }\n\n      var pos = node.position;\n      if (!pos) {\n        var neighbors = getNeighborBodies(node);\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\n      }\n\n      body = physicsSimulator.addBodyAt(pos);\n      body.id = nodeId;\n\n      nodeBodies.set(nodeId, body);\n      updateBodyMass(nodeId);\n\n      if (isNodeOriginallyPinned(node)) {\n        body.isPinned = true;\n      }\n    }\n  }\n\n  function releaseNode(node) {\n    var nodeId = node.id;\n    var body = nodeBodies.get(nodeId);\n    if (body) {\n      nodeBodies.delete(nodeId);\n      physicsSimulator.removeBody(body);\n    }\n  }\n\n  function initLink(link) {\n    updateBodyMass(link.fromId);\n    updateBodyMass(link.toId);\n\n    var fromBody = nodeBodies.get(link.fromId),\n        toBody  = nodeBodies.get(link.toId),\n        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\n\n    springTransform(link, spring);\n\n    springs[link.id] = spring;\n  }\n\n  function releaseLink(link) {\n    var spring = springs[link.id];\n    if (spring) {\n      var from = graph.getNode(link.fromId),\n          to = graph.getNode(link.toId);\n\n      if (from) updateBodyMass(from.id);\n      if (to) updateBodyMass(to.id);\n\n      delete springs[link.id];\n\n      physicsSimulator.removeSpring(spring);\n    }\n  }\n\n  function getNeighborBodies(node) {\n    // TODO: Could probably be done better on memory\n    var neighbors = [];\n    if (!node.links) {\n      return neighbors;\n    }\n    var maxNeighbors = Math.min(node.links.length, 2);\n    for (var i = 0; i < maxNeighbors; ++i) {\n      var link = node.links[i];\n      var otherBody = link.fromId !== node.id ? nodeBodies.get(link.fromId) : nodeBodies.get(link.toId);\n      if (otherBody && otherBody.pos) {\n        neighbors.push(otherBody);\n      }\n    }\n\n    return neighbors;\n  }\n\n  function updateBodyMass(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    body.mass = nodeMass(nodeId);\n    if (Number.isNaN(body.mass)) {\n      throw new Error('Node mass should be a number');\n    }\n  }\n\n  /**\n   * Checks whether graph node has in its settings pinned attribute,\n   * which means layout algorithm cannot move it. Node can be marked\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\n   *\n   * @param {Object} node a graph node to check\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\n   */\n  function isNodeOriginallyPinned(node) {\n    return (node && (node.isPinned || (node.data && node.data.isPinned)));\n  }\n\n  function getInitializedBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      initBody(nodeId);\n      body = nodeBodies.get(nodeId);\n    }\n    return body;\n  }\n\n  /**\n   * Calculates mass of a body, which corresponds to node with given id.\n   *\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\n   * @returns {Number} recommended mass of the body;\n   */\n  function defaultArrayNodeMass(nodeId) {\n    // This function is for older versions of ngraph.graph.\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.length / 3.0;\n  }\n\n  function defaultSetNodeMass(nodeId) {\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.size / 3.0;\n  }\n}\n\nfunction noop() { }\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}